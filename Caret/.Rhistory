OriginalTrain = read.csv("NYTimesBlogTrain.csv", stringsAsFactors=FALSE)
OriginalTest = read.csv("NYTimesBlogTest.csv", stringsAsFactors=FALSE)
NewsTrian = read.csv("AddedNewsTest.csv", stringsAsFactors = FALSE)
rm(NewsTrian)
NewsTrain = read.csv("AddedNewsTest.csv", stringsAsFactors = FALSE)
NewsTest = read.csv("AddedNewsTest.csv", stringsAsFactors = FALSE)
NewsTrain = read.csv("AddedNewsTrain.csv", stringsAsFactors = FALSE)
str(NewsTrain)
View(NEwsTrain$Headline)
View(NewsTrain$Headline)
str(NewsTrain)
View(OriginalTrain$Headline)
View(OriginalTrain$Snippet)
help(paste0)
library(caTools)
spl = sample.split (NewsTrain, SplitRatio = 0.7)
trainSet = subset(NewsTrain, spl = TRUE)
testSet = subset(NewsTrain, spl = FALSE)
dim(spl)
View(spl)
help(sample.splot)
help(sample.split)
spl = sample.split (NewsTrain$Popular, SplitRatio = 0.7)
trainSet = subset(NewsTrain, spl = TRUE)
testSet = subset(NewsTrain, spl = FALSE)
trainSet = subset(NewsTrain, spl = TRUE)
View(spl)
set.seed(1)
spl = sample.split (NewsTrain$Popular, SplitRatio = 0.7)
trainSet = subset(NewsTrain, spl == TRUE)
testSet = subset(NewsTrain, spl == FALSE)
library(caret)
outcomeNames = "Popular"
View(trainSet[,outcomeNames])
View(trainSet[, - outcomeNames])
help(train)
objControl <- trainControl(method='cv', number= 3, returnResamp='none',
summaryFunction = defaultSummary)
modelCasualglm = train(as.factor(Popular) ~., data = trainSet,  method = "treebag",
trControl = objControl,
tuneLength = 3)
objControl <- trainControl(method='cv', number= 3, returnResamp='none',
summaryFunction = defaultSummary)
modelCasualglm = train(as.factor(Popular) ~., data = trainSet,  method = "glm",
trControl = objControl,
tuneLength = 3)
PredTest = as.data.frame(predict(modelCasualglm, newdata=testSet, type = "prob"))
PredTest = as.data.frame(predict(modelCasualglm, newdata=testSet[,-"Popular"], type = "prob"))
colnames(trainSet)
colnames(trainSet,-1)
help(colnames)
test= colnames(trainSet)
View(test)
test = test[-43,]
test = as.data.frame(test)
test = test[-43,]
predictor = test
PredTest = as.data.frame(predict(modelCasualglm, newdata=testSet[,predictor], type = "prob"))
predictor
predictor = as.vector(predictor)
PredTest = as.data.frame(predict(modelCasualglm, newdata=testSet[,predictor], type = "prob"))
str(modelCasualglm)
modelCasualglm = train(as.factor(Popular) ~., data = trainSet,  method = "glm",
trControl = objControl,
tuneLength = 3)
summary(modelCasualglm)
PredTest = as.data.frame(predict(modelCasualglm, newdata=testSet[,predictor], type = "prob"))
library(dplyr)
help(select)
test = select(testSet, - Popular)
PredTest = as.data.frame(predict(modelCasualglm, newdata=test, type = "prob"))
trainSet = select(trainSet, -SectionNameMagazine)
testSet = select(testSet, -SectionNameMagazine)
trainSet = select(trainSet, -SectionNameN.Y....Region)
testSet = select(testSet, -SectionNameN.Y....Region)
objControl <- trainControl(method='cv', number= 3, returnResamp='none',
summaryFunction = defaultSummary)
modelCasualglm = train(as.factor(Popular) ~., data = trainSet,  method = "glm",
trControl = objControl,
tuneLength = 3)
testSet= select(testSet, - Popular)
PredTest = as.data.frame(predict(modelCasualglm, newdata=testSet, type = "prob"))
str(testSet)
str(trainSet)
modelCasualglm = train(Popular ~., data = trainSet,  method = "glm",
trControl = objControl,
tuneLength = 3)
PredTest = as.data.frame(predict(modelCasualglm, newdata=testSet, type = "prob"))
modelCasualglm = train(as.factor(Popular) ~., data = trainSet,  method = "glm",
trControl = objControl,
tuneLength = 3)
OriginalTrain = read.csv("NYTimesBlogTrain.csv", stringsAsFactors=FALSE)
OriginalTest = read.csv("NYTimesBlogTest.csv", stringsAsFactors=FALSE)
NewsTrain = read.csv("AddedNewsTrain.csv", stringsAsFactors = FALSE)
NewsTest = read.csv("AddedNewsTest.csv", stringsAsFactors = FALSE)
#in this part, we want to make a better model, instead of one with higher number of variables
library(caTools)
set.seed(1)
spl = sample.split (NewsTrain$Popular, SplitRatio = 0.7)
trainSet = subset(NewsTrain, spl == TRUE)
testSet = subset(NewsTrain, spl == FALSE)
library(caret)
library(dplyr)
objControl <- trainControl(method='cv', number= 3, returnResamp='none',
summaryFunction = defaultSummary)
modelCasualglm = train(as.factor(Popular) ~., data = trainSet,  method = "glm",
trControl = objControl,
tuneLength = 3)
PredTest = as.data.frame(predict(modelCasualglm, newdata=NewsTest, type = "prob"))
modelCasualglm = train(as.factor(Popular) ~., data = NewsTrain,  method = "glm",
trControl = objControl,
tuneLength = 3)
PredTest = predict(modelCasualglm, newdata=NewsTest, type = "prob")
outcome = "Popular"
predictor = colnames(NewsTest)
help(predict)
modelCasualglm = train(trainSet[,predictor],trainSet[,outcome],  method = "glm",
trControl = objControl,
tuneLength = 3)
PredTest = predict(modelCasualglm, newdata=testSet, type = "prob")
modelCasualglm = train(trainSet[,predictor],as.factor(trainSet[,outcome]),  method = "glm",
trControl = objControl,
tuneLength = 3)
PredTest = predict(modelCasualglm, newdata=testSet, type = "prob")
PredTest = predict(modelCasualglm, newdata=testSet[,predictor], type = "prob")
PredTest = predict(modelCasualglm, testSet[,predictor], type = "prob")
View(testSet[,predictor])
rm(test)
PredTest = predict(modelCasualglm, testSet[,predictor])
View(PredTest)
PredTest = predict(modelCasualglm, testSet)
View(Predtest)
View(PredTest)
table(PredTest,testSet[,outcome])
(1549+219)/1960
modelglm = glm (as.factor(Popular)~., data = trainSet)
modelglm = glm (Popular~., data = trainSet)
PredTest = predict(modelglm, testSet)
table(PredTest,testSet[,outcome])
PredTest = predict(modelglm, testSet, type = "class")
PredTest = predict(modelglm, testSet, type = "response")
table(PredTest,testSet[,outcome])
View(PredTest)
PredTest = predict(modelglm, testSet)
View(PredTest)
modelglm = glm (as.factor(Popular)~., data = trainSet)
as.factor(trainSet$Popular)
modelglm = glm (Popular~., data = trainSet,family = "binomial")
PredTest = predict(modelglm, testSet)
table(PredTest,testSet[,outcome])
View(PredTest)
modelglm = glm (as.factor(Popular)~., data = trainSet,family = "binomial")
PredTest = predict(modelglm, testSet)
table(PredTest,testSet[,outcome])
min(PredTest)
modelCasualglm = train(trainSet[,predictor],as.factor(trainSet[,outcome]),  method = "rf",
trControl = objControl,
tuneLength = 3)
library(caret)
modelCasualglm = train(trainSet[,predictor],as.factor(trainSet[,outcome]),  method = "rf",
trControl = objControl,
tuneLength = 3)
modelCasualglm = train(trainSet[,predictor],as.factor(trainSet[,outcome]),  method = "ctree",
trControl = objControl,
tuneLength = 3)
PredTest = predict(modelCasualglm, testSet)
table(PredTest,testSet[,outcome])
(1562+214)/1960
modelCasualglm = train(trainSet[,predictor],as.factor(trainSet[,outcome]),  method = "glm",
trControl = objControl,
tuneLength = 3)
PredTest = predict(modelCasualglm, testSet)
table(PredTest,testSet[,outcome])
(1549+219)/1960
modelCasualglm = train(trainSet[,predictor],as.factor(trainSet[,outcome]),  method = "rf",
trControl = objControl,
tuneLength = 1)
PredTest = predict(modelCasualglm, NewsTest)
modelRF = randomForest(as.factor(Popular)~., data = trainSet)
PredTest = predict(modelRF,testSet)
table(PredTest,testSet[,outcome])
(1558+221)/1960
modelCasualglm = train(trainSet[,predictor],as.factor(trainSet[,outcome]),  method = "ctree",
trControl = objControl,
tuneLength = 3)
PredTest = predict(modelCasualglm, NewsTest, type = "prob")
PredTest = predict(modelCasualglm, NewsTest)
table(PredTest,testSet[,outcome])
PredTest = predict(modelCasualglm, testSet)
table(PredTest,testSet[,outcome])
help(predict.train)
PredTest = predict.train(modelCasualglm, testSet, type ="prob")
PredTest = predict.train(modelCasualglm, testSet, type ="raw")
View(PredTest)
modelCasualglm = train(trainSet[,predictor],as.factor(trainSet[,outcome]),  method = "glm",
trControl = objControl,
tuneLength = 3)
PredTest = predict.train(modelCasualglm, testSet, type ="prob")
PredTest = predict.train(modelCasualglm, testSet, type ="raw")
table(PredTest,testSet[,outcome])
modelCasualglm = train(Popular ~. ,data = trainSet,  method = "glm",
trControl = objControl,
tuneLength = 3)
PredTest = predict.train(modelCasualglm, testSet, type ="prob")
modelCasualglm = train(as.factor(Popular) ~. ,data = trainSet,  method = "glm",
trControl = objControl,
tuneLength = 3)
PredTest = predict.train(modelCasualglm, testSet, type ="prob")
help(trainControl)
outcome = "Popular"
objControl <- trainControl(method='cv', number= 3, returnResamp='none',
summaryFunction = defaultSummary, classProbs= TRUE)
modelCasualglm = train(as.factor(Popular) ~. ,data = trainSet,  method = "glm",
trControl = objControl,
tuneLength = 3)
PredTest = predict.train(modelCasualglm, testSet, type ="prob")
help(trian)
help(trani)
help(train)
PredTest = predict.train(modelCasualglm, testSet)
modelCasualglm$results
modelCasualglm = train(as.factor(Popular) ~. ,data = trainSet,  method = "gbm",
trControl = objControl,
tuneLength = 3)
modelCasualglm$results
help(gbm)
model = gbm(as.factor(Popular) ~. , data = trainSet, shrinkage = 0.1, interaction.dept = 2, n.trees = 50)
PredTest=  predict.train(model, testSet, type ="prob")
PredTest=  predict.train(model, testSet)
PredTest=  predic(model, testSet)
PredTest=  predict(model, testSet)
model = gbm(as.factor(Popular) ~. , data = trainSet, shrinkage = 0.1, interaction.dept = 2, n.trees = 50)
PredTest=  predict(model, testSet, n.trees = 50, type = "prob")
PredTest=  predict(model, testSet, n.trees = 50, type = "response")
table(PredTest,testSet[,outcome])
View(PredTest)
modelCasualglm = train(as.factor(Popular) ~. ,data = trainSet,  method = "ctree",
trControl = objControl,
tuneLength = 3)
modelCasualglm$results
model = ctree(as.factor(Popular) ~. , data = trainSet, mincriterion = 0.01)
PredTest = predict.train(modelCasualglm, testSet, probability = TRUE)
PredTest = predict.train(modelCasualglm, testSet, probability  = TRUE)
help(predict)
PredTest = predict.train(modelCasualglm, testSet, type = "response")
PredTest = predict.train(modelCasualglm, testSet, type = "prob")
modelCasualglm$results
PredTest = predict(modelCasualglm, testSet, type = "prob")
PredTest = predict(modelCasualglm, testSet)
PredTest = predict.train(modelCasualglm, testSet, type = "prob")
PredTest = predict.train(modelCasualglm, testSet, type = "raw")
table(PredTest,testSet[,outcome])
attr(PredTest)
attr(PredTest,"prob")
PredTest = predict.train(modelCasualglm, testSet, type = "prob")
modelCasualglm = train(as.factor(Popular) ~. ,data = trainSet,  method = "ctree",
trControl = objControl,
tuneLength = 3,metric ="ROC")
PredTest = predict.train(modelCasualglm, testSet, type = "prob")
objControl <- trainControl(method='cv', number= 3, returnResamp='none',
summaryFunction = twoClassSummary, classProbs= TRUE)
modelCasualglm = train(as.factor(Popular) ~. ,data = trainSet,  method = "gbm",
trControl = objControl,
tuneLength = 3,metric ="ROC",verbose = FALSE)
PredTest = predict.train(modelCasualglm, testSet, type = "prob")
PredTest = predict.train(modelCasualglm, testSet)
PredTest$data
PredTest
PredTest = predict.train(modelCasualglm, testSet, type = "prob")
fiveStats <- function(...) c(twoClassSummary(...), defaultSummary(...))
objControl <- trainControl(method='cv',
summaryFunction = fiveStats, classProbs= TRUE)
modelCasualglm = train(as.factor(Popular) ~. ,data = trainSet,  method = "gbm",
trControl = objControl,
tuneLength = 3,metric ="ROC",verbose = FALSE)
PredTest = predict(modelCasualglm, testSet, type = "prob")
modelCasualglm = train(as.factor(Popular) ~. ,data = trainSet,  method = "gbm",
trControl = objControl,
metric ="ROC",verbose = FALSE)
test = trainSet
test$Popular [test$Popular == 1] = "Yes"
test$Popular [test$Popular == 0] = "No"
View(test)
View(test$Popular)
str(test$Popular)
trainSet$Popular [test$Popular == 1] = "Yes"
trainSet$Popular [test$Popular == 0] = "No"
testSet$Popular [test$Popular == 0] = "No"
str(testSet)
testSet$Popular [testSet$Popular == 0] = "No"
testSet$Popular [testSet$Popular == 1] = "Yes"
modelCasualglm = train(as.factor(Popular) ~. ,data = trainSet,  method = "gbm",
trControl = objControl,
metric ="ROC",verbose = FALSE)
PredTest = predict(modelCasualglm, testSet, type = "prob")
View(trainSet$Popular)
View(testSet$Popular)
trainSet$Popular[trainSet$Popular == 1] = "Yes"
trainSet$Popular[trainSet$Popular == 0] = "No"
modelCasualglm = train(as.factor(Popular) ~. ,data = trainSet,  method = "gbm",
trControl = objControl,
metric ="ROC",verbose = FALSE)
PredTest = predict(modelCasualglm, testSet, type = "prob")
View(PredTest)
plot(PredTest$Yes)
table(PredTest > 0.5,testSet[,outcome])
table(PredTest$Yes > 0.5,testSet[,outcome])
(1570+215)/1960
PredTest = predict(modelCasualglm, NewsTest, type = "prob")
plot(PredTest$Yes)
OriginalTrain = read.csv("NYTimesBlogTrain.csv", stringsAsFactors=FALSE)
OriginalTest = read.csv("NYTimesBlogTest.csv", stringsAsFactors=FALSE)
NewsTrain = read.csv("AddedNewsTrain.csv", stringsAsFactors = FALSE)
NewsTest = read.csv("AddedNewsTest.csv", stringsAsFactors = FALSE)
library(caTools)
set.seed(1)
spl = sample.split (NewsTrain$Popular, SplitRatio = 0.7)
trainSet = subset(NewsTrain, spl == TRUE)
testSet = subset(NewsTrain, spl == FALSE)
library(caret)
library(dplyr)
trainSet$Popular[trainSet$Popular == 1] = "Yes"
trainSet$Popular[trainSet$Popular == 0] = "No"
testSet$Popular[testSet$Popular == 1] = "Yes"
testSet$Popular[testSet$Popular == 0] = "No"
fiveStats <- function(...) c(twoClassSummary(...), defaultSummary(...))
objControl <- trainControl(method='cv',
summaryFunction = fiveStats, classProbs= TRUE)
modelCasualglm = train(as.factor(Popular) ~. ,data = trainSet,  method = "gbm",
trControl = objControl,
metric ="ROC",verbose = FALSE)
modelCasualglm$results
PredTest = predict(modelCasualglm, NewsTest, type = "prob")
PredTest = predict(modelCasualglm, testSet, type = "prob")
table(PredTest$Yes > 0.5,testSet[,outcome])
outcome = "Popular"
modelCasualglm$results
PredTest = predict(modelCasualglm, testSet, type = "prob")
table(PredTest$Yes > 0.5,testSet[,outcome])
(1573+212)/1960
library(randomForest)
modelRF = randomForest(as.factor(Popular)~., data = trainSet)
PredTest = predict(modelRF,testSet)
table(PredTest,testSet[,outcome])
(1560+224)/1960
modelglm = glm (as.factor(Popular)~., data = trainSet,family = "binomial")
PredTest = predict(modelglm, testSet)
table(PredTest,testSet[,outcome])
modelglm = glm (as.factor(Popular)~., data = trainSet,family = binomial)
PredTest = predict(modelglm, testSet)
table(PredTest,testSet[,outcome])
table(PredTest > 0.5,testSet[,outcome])
(1573+198)/1960
MySubmission = predict(modelCasualglm, NewsTest, type = "prob")[,2]
write.csv(MySubmission, "SubmissionHeadlineLog.csv", row.names=FALSE)
write.csv(MySubmission, "SubmissionHeadlinegbm.csv", row.names=FALSE)
View(MySubmission)
View(MySubmission)
PredTest = predict(modelCasualglm, testSet, type = "prob")
table(PredTest$Yes > 0.5,testSet[,outcome])
(1573+212)/1960
View(MySubmission)
PredTest = predict(modelCasualglm, NewsTest, type = "prob")[,2]
MySubmission = data.frame(UniqueID = NewsTest$UniqueID, Probability1 = PredTest)
View(NewsTest)
MySubmission = data.frame(UniqueID = OriginalTest$UniqueID, Probability1 = PredTest)
write.csv(MySubmission, "SubmissionHeadlinegbm.csv", row.names=FALSE)
summaryFunction = fiveStats, classProbs= TRUE)
modelCasualglm = train(as.factor(Popular) ~. ,data = trainSet,  method = "rf",
trControl = objControl,
metric ="ROC",verbose = FALSE)
outcome = "Popular"
modelCasualglm$results
PredTest = predict(modelCasualglm, testSet, type = "prob")
table(PredTest$Yes > 0.5,testSet[,outcome])
(1545+218)/1960
PredTest = predict(modelCasualglm, NewsTest, type = "prob")[,2]
MySubmission = data.frame(UniqueID = OriginalTest$UniqueID, Probability1 = PredTest)
write.csv(MySubmission, "SubmissionHeadlinegbm.csv", row.names=FALSE)
write.csv(MySubmission, "SubmissionHeadlinerftrained.csv", row.names=FALSE)
objControl <- trainControl(method='cv',
summaryFunction = fiveStats, classProbs= TRUE)
library(caret)
objControl <- trainControl(method='cv',
summaryFunction = fiveStats, classProbs= TRUE)
modelCasualglm = train(as.factor(Popular) ~. ,data = trainSet,  method = "ctree",
trControl = objControl,
metric ="ROC",verbose = FALSE)
objControl <- trainControl(method='cv',
summaryFunction = fiveStats, classProbs= TRUE)
modelCasualglm = train(as.factor(Popular) ~. ,data = trainSet,  method = "ctree",
trControl = objControl, tunelength = 5,
metric ="ROC",verbose = FALSE)
modelCasualglm = train(as.factor(Popular) ~. ,data = trainSet,  method = "ctree",
trControl = objControl, tuneLength = 5,
metric ="ROC",verbose = FALSE)
help(trainSet)
dim(trainSet)
objControl <- trainControl(method='cv',
summaryFunction = fiveStats, classProbs= TRUE)
modelCasualglm = train(as.factor(Popular) ~. ,data = trainSet,  method = "glm",
trControl = objControl,
metric ="ROC",verbose = FALSE)
modelCasualglm = train(as.factor(Popular) ~. ,data = trainSet,  method = "gbm",
trControl = objControl,
metric ="ROC",verbose = FALSE)
modelCasualglm$results
PredTest = predict(modelCasualglm, testSet, type = "prob")
table(PredTest$Yes > 0.5,testSet[,outcome])
(1569+219)/1960
objControl <- trainControl(method='cv',
summaryFunction = fiveStats, classProbs= TRUE)
modelCasualglm = train(as.factor(Popular) ~. ,data = trainSet,  method = "ada",
trControl = objControl,
metric ="ROC",verbose = FALSE)
modelCasualglm = train(as.factor(Popular) ~. ,data = trainSet,  method = "treebag",
trControl = objControl,
metric ="ROC",verbose = FALSE)
modelCasualglm$results
PredTest = predict(modelCasualglm, testSet, type = "prob")
table(PredTest$Yes > 0.5,testSet[,outcome])
(1533+211)/1960
PredTest = predict(modelCasualglm, NewsTest, type = "prob")[,2]
MySubmission = data.frame(UniqueID = OriginalTest$UniqueID, Probability1 = PredTest)
wirte.csv(MySubmission, "SubmissionHeadlinetreebag.csv",row.names= FALSE)
write.csv(MySubmission, "SubmissionHeadlinetreebag.csv",row.names= FALSE)
objControl <- trainControl(method='cv',
summaryFunction = fiveStats, classProbs= TRUE)
modelCasualglm = train(as.factor(Popular) ~. ,data = trainSet,  method = "glmboost",
trControl = objControl,
metric ="ROC",verbose = FALSE)
PredTest = predict(modelCasualglm, NewsTest, type = "prob")[,2]
modelCasualglm$results
PredTest = predict(modelCasualglm, testSet, type = "prob")
table(PredTest$Yes > 0.5,testSet[,outcome])
(1533+211)/1960
PredTest = predict(modelCasualglm, NewsTest, type = "prob")[,2]
MySubmission = data.frame(UniqueID = OriginalTest$UniqueID, Probability1 = PredTest)
write.csv(MySubmission, "SubmissionHeadlineGLMBoost.csv",row.names = FALSE)
str(NewsTrain)
table(NewsTrain$Weekday)
str(NewsTrainHeadline)
NewsTrainHeadline = read.csv("NewsTrainwHeadline.csv", stringsAsFactors=FALSE)
