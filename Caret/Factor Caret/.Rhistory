Prednnet = predict (Headlinennet, newdata = testSet, type = "raw")
table(Prednnet > 0.5, testSet$Popular)
(1526+241)/1958
library(caret)
help(train)
modelCasualglm
modelCasualglm$bestTune
str(TrainHeadline)
table(TrainHeadline$Popular, TrainHeadline$today)
prop.table(table(TrainHeadline$Popular, TrainHeadline$today))
prop.table(table(TrainHeadline$Popular, TrainHeadline$today),2)
prop.table(table(TrainHeadline$Popular, TrainHeadline$today),1)
prop.table(table(TrainHeadline$Popular, TrainHeadline$york),1)
prop.table(table(TrainHeadline$Popular, TrainHeadline$springsumm),1)
prop.table(table(TrainHeadline$Popular, TrainHeadline$SectionName),1)
library(ggplot2)
qplot(SectionName, data = TrainHeadline, color = Popular)
str(OriginalTrain)
qplot(Weekday, data = TrainHeadline, color = Popular)
qplot(SubsectionName , data= TrainHeadline, color = Popular)
qplot(NewsDesk, data = TrainHeadline, color = Popular)
qplot (log(WordCount), data = TrainHeadline, color = Popular)
qplot (WordCount, data = TrainHeadline, color = Popular)
summary(TrainHeadline$WordCount)
OriginalTrain$Abstract[1]
OriginalTrain$Abstract[2]
OriginalTrain$Abstract[3]
OriginalTrain$Headline[3]
prop.table(table(TrainHeadline$Popular, TrainHeadline$china),1)
prop.table(table(TrainHeadline$Popular, TrainHeadline$china),2)
prop.table(table(TrainHeadline$Popular, TrainHeadline$today),2)
prop.table(table(TrainHeadline$Popular, TrainHeadline$york),2)
prop.table(table(TrainHeadline$Popular, TrainHeadline$springsumm),2)
prop.table(table(TrainHeadline$Popular, TrainHeadline$SectionName),2)
prop.table(table(TrainHeadline$Popular, TrainHeadline$china),2)
prop.table(table(TrainHeadline$Popular, TrainHeadline$SectionName),2)
qplot(SectionName, data = TrainHeadline, color = Popular)
library(randomForest)
HeadlineWordsRF = randomForest(as.factor(Popular)~., data = TrainHeadline)
PredRF = as.data.frame(predict(HeadlineWordsRF, newdata=TestHeadline, type = "prob"))
objControl = trainControl(method = 'cv',number = 15,classProbs= TRUE)
modelCasualglm = train(as.factor(Popular) ~. ,data = TrainHeadline,  method = "gbm",
trControl = objControl,
metric ="ROC",verbose = FALSE)
Predgbm = as.data.frame(predict(modelCasualglm, newdata=TestHeadline, type = "prob"))
library(caret)
objControl = trainControl(method = 'cv',number = 15,classProbs= TRUE)
modelCasualglm = train(as.factor(Popular) ~. ,data = TrainHeadline,  method = "gbm",
trControl = objControl,
metric ="ROC",verbose = FALSE)
Predgbm = as.data.frame(predict(modelCasualglm, newdata=TestHeadline, type = "prob"))
HeadlineWordsLog = glm(as.factor(Popular)~., data = TrainHeadline, family= binomial)
PredLog = as.data.frame(predict(HeadlineWordsLog, newdata=TestHeadline, type = "response"))
library(e1071)
HeadlineSvm = svm(as.factor(Popular)~., data = TrainHeadline, probability = TRUE)
PredSvm = predict(HeadlineSvm, newdata=TestHeadline,probability = TRUE)
library(nnet)
Headlinennet = nnet(as.factor(Popular)~., data= TrainHeadline, size = 9)
Prednnet = predict (Headlinennet, newdata = TestHeadline, type = "raw")
PredTest = (3*PredLog+1.5*Predgbm$Yes +2.5*PredRF$Yes +1.5*attr(PredSvm, "probabilities")[,1] +1.5*Prednnet )/10
MySubmissionCombined = data.frame(UniqueID = OriginalTest$UniqueID, Probability1 = PredTest)
colnames(MySubmissionCombined) = c("UniqueID","Probability1")
write.csv(MySubmissionCombined, "SubmissionHeadlinecombined.csv", row.names=FALSE)
varImpPlot (HeadlineWordsRF)
library(randomForest)
varImpPlot (HeadlineWordsRF)
library(caret)
varImp (modelCasualglm)
qplot(SectionName, data = TrainHeadline, color = Popular)
qplot(NewsDesk, data = TrainHeadline, color = Popular)
library(randomForest)
varImpPlot (HeadlineWordsRF)
library(caret)
varImp (modelCasualglm)
table(TrainHeadline$NewsDesk, TrainHeadline$SectionName)
table(TrainHeadline$NewsDesk, TrainHeadline$SubsectionName)
summary(TrainHeadline$SubsectionName)
prop.table((TrainHeadline$SubsectionName))
prop.table(table(TrainHeadline$SubsectionName))
prop.table(table(TrainHeadline$SectionName))
prop.table(table(TrainHeadline$NewsDesk))
table(TrainHeadline$SectionName,TrainHeadline$SubsectionName)
prop.table(table(TrainHeadline$SectionName))
prop.table(table(TrainHeadline$SubsectionName))
table(TrainHeadline$NewsDesk, TrainHeadline$SubsectionName)
table(TrainHeadline$NewsDesk, TrainHeadline$SectionName)
HeadlineWordsRF = randomForest(as.factor(Popular)~., data = TrainHeadline, importance = TRUE)
varImpPlot (HeadlineWordsRF)
prop.table(table(TrainHeadline$Popular, TrainHeadline$today),2)
prop.table(table(TrainHeadline$Popular, TrainHeadline$york),2)
prop.table(table(TrainHeadline$Popular, TrainHeadline$springsumm),2)
prop.table(table(TrainHeadline$Popular, TrainHeadline$SectionName),2)
prop.table(table(TrainHeadline$Popular, TrainHeadline$china),2)
library(randomForest)
HeadlineWordsRF = randomForest(as.factor(Popular)~., data = TrainHeadline, importance = TRUE)
PredRF = as.data.frame(predict(HeadlineWordsRF, newdata=TestHeadline, type = "prob"))
library(caret)
objControl = trainControl(method = 'cv',number = 15,classProbs= TRUE)
modelCasualglm = train(as.factor(Popular) ~. ,data = TrainHeadline,  method = "gbm",
trControl = objControl,
metric ="ROC",verbose = FALSE)
Predgbm = as.data.frame(predict(modelCasualglm, newdata=TestHeadline, type = "prob"))
HeadlineWordsLog = glm(as.factor(Popular)~., data = TrainHeadline, family= binomial)
PredLog = as.data.frame(predict(HeadlineWordsLog, newdata=TestHeadline, type = "response"))
library(e1071)
HeadlineSvm = svm(as.factor(Popular)~., data = TrainHeadline, probability = TRUE)
PredSvm = predict(HeadlineSvm, newdata=TestHeadline,probability = TRUE)
library(nnet)
Headlinennet = nnet(as.factor(Popular)~., data= TrainHeadline, size = 9)
Prednnet = predict (Headlinennet, newdata = TestHeadline, type = "raw")
PredTest = (2.5*PredLog+2*Predgbm$Yes +3*PredRF$Yes +1*attr(PredSvm, "probabilities")[,1] +1.5*Prednnet )/10
MySubmissionCombined = data.frame(UniqueID = OriginalTest$UniqueID, Probability1 = PredTest)
colnames(MySubmissionCombined) = c("UniqueID","Probability1")
write.csv(MySubmissionCombined, "SubmissionHeadlinecombined.csv", row.names=FALSE)
PredTest = (2.5*PredLog+2*Predgbm$Yes +3*PredRF$Yes +1*attr(PredSvm, "probabilities")[,1] +1.5*Prednnet )/10
MySubmissionCombined = data.frame(UniqueID = OriginalTest$UniqueID, Probability1 = PredTest)
colnames(MySubmissionCombined) = c("UniqueID","Probability1")
write.csv(MySubmissionCombined, "SubmissionHeadlinecombined.csv", row.names=FALSE)
dim(PredSvm)
View(PredSvm)
dim(Prednnet)
dim(PredLog)
dim(Predgbm)
dim(PredRF)
#Ensembles
library(randomForest)
HeadlineWordsRF = randomForest(as.factor(Popular)~., data = TrainHeadline, importance = TRUE)
PredRF = as.data.frame(predict(HeadlineWordsRF, newdata=TestHeadline, type = "prob"))
library(caret)
objControl = trainControl(method = 'cv',number = 15,classProbs= TRUE)
modelCasualglm = train(as.factor(Popular) ~. ,data = TrainHeadline,  method = "gbm",
trControl = objControl,
metric ="ROC",verbose = FALSE)
Predgbm = as.data.frame(predict(modelCasualglm, newdata=TestHeadline, type = "prob"))
HeadlineWordsLog = glm(as.factor(Popular)~., data = TrainHeadline, family= binomial)
PredLog = as.data.frame(predict(HeadlineWordsLog, newdata=TestHeadline, type = "response"))
library(e1071)
HeadlineSvm = svm(as.factor(Popular)~., data = TrainHeadline, probability = TRUE)
PredSvm = predict(HeadlineSvm, newdata=TestHeadline,probability = TRUE)
library(nnet)
Headlinennet = nnet(as.factor(Popular)~., data= TrainHeadline, size = 9)
Prednnet = predict (Headlinennet, newdata = TestHeadline, type = "raw")
PredTest = (2.5*PredLog+2.5*Predgbm$Yes +2*PredRF$Yes +1.5*attr(PredSvm, "probabilities")[,1] +1.5*Prednnet )/10
MySubmissionCombined = data.frame(UniqueID = OriginalTest$UniqueID, Probability1 = PredTest)
colnames(MySubmissionCombined) = c("UniqueID","Probability1")
write.csv(MySubmissionCombined, "SubmissionHeadlinecombined.csv", row.names=FALSE)
library(caTools)
set.seed(11)
EnsembleTrain = TrainHeadline
EnsembleTest = TestHeadline
spl = sample.split (EnsembleTrain$Popular, SplitRatio = 0.7)
library(caTools)
set.seed(11)
spl = sample.split (TrainHeadline$Popular, SplitRatio = 0.7)
ensembleData = subset(EnsembleTrain, spl = TRUE)
blenderData = subset(EnsembleTrain, spl = FALSE)
testingData = TestHeadline
library(caTools)
set.seed(11)
spl = sample.split (TrainHeadline$Popular, SplitRatio = 0.7)
ensembleData = subset(EnsembleTrain, spl = TRUE)
blenderData = subset(EnsembleTrain, spl = FALSE)
testingData = TestHeadline
library(randomForest)
HeadlineWordsRF = randomForest(as.factor(Popular)~., data = ensembleData, importance = TRUE)
library(caret)
objControl = trainControl(method = 'cv',number = 15,classProbs= TRUE)
modelCasualglm = train(as.factor(Popular) ~. ,data = ensembleData,  method = "gbm",
trControl = objControl,
metric ="ROC",verbose = FALSE)
HeadlineWordsLog = glm(as.factor(Popular)~., data = ensembleData, family= binomial)
blenderData$PredRF = predict(HeadlineWordsRF, newdata=blenderData, type = "prob")
blenderData$Predgbm = predict(modelCasualglm, newdata=blenderData, type = "prob")
blenderData$PredLog = predict(HeadlineWordsLog, newdata=blenderData, type = "response")
testingData$PredRF = predict(HeadlineWordsRF, newdata=testingData, type = "prob")
testingData$Predgbm = predict(modelCasualglm, newdata=testingData, type = "prob")
testingData$PredLog = predict(HeadlineWordsLog, newdata=testingData, type = "response")
final_blender_model = train(as.factor(Popular) ~. ,data = blenderData,  method = "gbm",
trControl = objControl,
metric ="ROC",verbose = FALSE)
View(testingData$Predgbm)
View(blenderData$PredRF)
blenderData$PredRF = predict(HeadlineWordsRF, newdata=blenderData, type = "prob")[,2]
View(blenderData$PredRF)
View(blenderData$Predgbm)
blenderData$Predgbm = predict(modelCasualglm, newdata=blenderData, type = "prob")[,2]
View(blenderData$PredLog)
View(testingData$PredRF)
View(testingData$Predgbm)
testingData$PredRF = predict(HeadlineWordsRF, newdata=testingData, type = "prob")[,2]
testingData$Predgbm = predict(modelCasualglm, newdata=testingData, type = "prob")[,2]
testingData$PredLog = predict(HeadlineWordsLog, newdata=testingData, type = "response")
final_blender_model = train(as.factor(Popular) ~. ,data = blenderData,  method = "gbm",
trControl = objControl,
metric ="ROC",verbose = FALSE)
Prediction = predict(final_blender_model, newdata=testingData)
MySubmissionCombined = data.frame(UniqueID = OriginalTest$UniqueID, Probability1 = Prediction)
colnames(MySubmissionCombined) = c("UniqueID","Probability1")
write.csv(MySubmissionCombined, "SubmissionHeadlineTrueEnsemble.csv", row.names=FALSE)
plot(MySubmissionCombined$Probability1)
View(MySubmissionCombined$Probability1)
Prediction = predict(final_blender_model, newdata=testingData, type = "prob")[,2]
MySubmissionCombined = data.frame(UniqueID = OriginalTest$UniqueID, Probability1 = Prediction)
colnames(MySubmissionCombined) = c("UniqueID","Probability1")
write.csv(MySubmissionCombined, "SubmissionHeadlineTrueEnsemble.csv", row.names=FALSE)
plot(MySubmissionCombined$Probability1)
summary(MySubmissionCombined$Probability1)
library(e1071)
HeadlineSvm = svm(as.factor(Popular)~., data = ensembleData, probability = TRUE)
library(nnet)
Headlinennet = nnet(as.factor(Popular)~., data= ensembleData, size = 9)
blenderData$PredRF = predict(HeadlineWordsRF, newdata=blenderData, type = "prob")[,2]
blenderData$Predgbm = predict(modelCasualglm, newdata=blenderData, type = "prob")[,2]
blenderData$PredLog = predict(HeadlineWordsLog, newdata=blenderData, type = "response")
blenderData$PredSvm = predict(HeadlineSvm, newdata=blenderData,probability = TRUE)
blenderData$Prednnet = predict (Headlinennet, newdata = blenderData, type = "raw")
testingData$PredRF = predict(HeadlineWordsRF, newdata=testingData, type = "prob")[,2]
testingData$Predgbm = predict(modelCasualglm, newdata=testingData, type = "prob")[,2]
testingData$PredLog = predict(HeadlineWordsLog, newdata=testingData, type = "response")
testingData$PredSvm = predict(HeadlineSvm, newdata=testingData,probability = TRUE)
testingData$Prednnet = predict (Headlinennet, newdata = testingData, type = "raw")
final_blender_model = train(as.factor(Popular) ~. ,data = blenderData,  method = "gbm",
trControl = objControl,
metric ="ROC",verbose = FALSE)
Prediction = predict(final_blender_model, newdata=testingData, type = "prob")[,2]
Prediction = predict(final_blender_model, newdata=testingData, type = "prob")[,2]
MySubmissionCombined = data.frame(UniqueID = OriginalTest$UniqueID, Probability1 = Prediction)
colnames(MySubmissionCombined) = c("UniqueID","Probability1")
write.csv(MySubmissionCombined, "SubmissionHeadlineTrueEnsemble.csv", row.names=FALSE)
library(caret)
varImp (final_blender_model)
objControl = trainControl(method = 'cv',number = 3,classProbs= TRUE)
final_blender_model = train(as.factor(Popular) ~. ,data = blenderData,  method = "gbm",
trControl = objControl,
library(caret)
objControl = trainControl(method = 'cv',number = 3,classProbs= TRUE)
final_blender_model = train(as.factor(Popular) ~. ,data = blenderData,  method = "gbm",
trControl = objControl,
metric ="ROC",verbose = FALSE)
varImp (final_blender_model)
Prediction = predict(final_blender_model, newdata=testingData, type = "prob")[,2]
MySubmissionCombined = data.frame(UniqueID = OriginalTest$UniqueID, Probability1 = Prediction)
colnames(MySubmissionCombined) = c("UniqueID","Probability1")
write.csv(MySubmissionCombined, "SubmissionHeadlineTrueEnsemble.csv", row.names=FALSE)
blenderData$PredRF = predict(HeadlineWordsRF, newdata=blenderData, type = "prob")[,2]
blenderData$Predgbm = predict(modelCasualglm, newdata=blenderData, type = "prob")[,2]
blenderData$PredLog = predict(HeadlineWordsLog, newdata=blenderData, type = "response")
library(randomForest)
blenderData$PredRF = predict(HeadlineWordsRF, newdata=blenderData, type = "prob")[,2]
blenderData$Predgbm = predict(modelCasualglm, newdata=blenderData, type = "prob")[,2]
blenderData$PredLog = predict(HeadlineWordsLog, newdata=blenderData, type = "response")
blenderData$PredSvm = NULL#predict(HeadlineSvm, newdata=blenderData,probability = TRUE)
blenderData$Prednnet = NULL#predict (Headlinennet, newdata = blenderData, type = "raw")
testingData$PredRF = predict(HeadlineWordsRF, newdata=testingData, type = "prob")[,2]
testingData$Predgbm = predict(modelCasualglm, newdata=testingData, type = "prob")[,2]
testingData$PredLog = predict(HeadlineWordsLog, newdata=testingData, type = "response")
testingData$PredSvm = NULL#predict(HeadlineSvm, newdata=testingData,probability = TRUE)
testingData$Prednnet = NULL#predict (Headlinennet, newdata = testingData, type = "raw")
library(caret)
objControl = trainControl(method = 'cv',number = 3,classProbs= TRUE)
final_blender_model = train(as.factor(Popular) ~. ,data = blenderData,  method = "gbm",
trControl = objControl,
metric ="ROC",verbose = FALSE)
varImp (final_blender_model)
Prediction = predict(final_blender_model, newdata=testingData, type = "prob")[,2]
MySubmissionCombined = data.frame(UniqueID = OriginalTest$UniqueID, Probability1 = Prediction)
colnames(MySubmissionCombined) = c("UniqueID","Probability1")
write.csv(MySubmissionCombined, "SubmissionHeadlineTrueEnsemble.csv", row.names=FALSE)
plot(MySubmissionCombined$Probability1)
set.seed(13)
spl = sample.split (TrainHeadline$Popular, SplitRatio = 0.7)
ensembleData = subset(EnsembleTrain, spl = TRUE)
blenderData = subset(EnsembleTrain, spl = FALSE)
testingData = TestHeadline
library(randomForest)
HeadlineWordsRF = randomForest(as.factor(Popular)~., data = ensembleData, importance = TRUE)
library(caret)
objControl = trainControl(method = 'cv',number = 15,classProbs= TRUE)
modelCasualglm = train(as.factor(Popular) ~. ,data = ensembleData,  method = "gbm",
trControl = objControl,
metric ="ROC",verbose = FALSE)
HeadlineWordsLog = glm(as.factor(Popular)~., data = ensembleData, family= binomial)
library(e1071)
HeadlineSvm = svm(as.factor(Popular)~., data = ensembleData, probability = TRUE)
library(nnet)
Headlinennet = nnet(as.factor(Popular)~., data= ensembleData, size = 9)
blenderData$PredRF = predict(HeadlineWordsRF, newdata=blenderData, type = "prob")[,2]
blenderData$Predgbm = predict(modelCasualglm, newdata=blenderData, type = "prob")[,2]
blenderData$PredLog = predict(HeadlineWordsLog, newdata=blenderData, type = "response")
blenderData$PredSvm = predict(HeadlineSvm, newdata=blenderData,probability = TRUE)
blenderData$Prednnet = predict (Headlinennet, newdata = blenderData, type = "raw")
testingData$PredRF = predict(HeadlineWordsRF, newdata=testingData, type = "prob")[,2]
testingData$Predgbm = predict(modelCasualglm, newdata=testingData, type = "prob")[,2]
testingData$PredLog = predict(HeadlineWordsLog, newdata=testingData, type = "response")
testingData$PredSvm = predict(HeadlineSvm, newdata=testingData,probability = TRUE)
testingData$Prednnet = predict (Headlinennet, newdata = testingData, type = "raw")
final_blender_model = randomForest(as.factor(Popular)~., data = blenderData, importance = TRUE)
varImpPlot(final_blender_model)
Prediction = predict(final_blender_model, newdata=testingData, type = "prob")[,2]
MySubmissionCombined = data.frame(UniqueID = OriginalTest$UniqueID, Probability1 = Prediction)
colnames(MySubmissionCombined) = c("UniqueID","Probability1")
write.csv(MySubmissionCombined, "SubmissionHeadlineTrueEnsemble.csv", row.names=FALSE)
plot(MySubmissionCombined$Probability1)
library(caretEnsemble)
model_list = caretList (as.factor(Popular) ~. ,data = TrainHeadline,  methodList = c('gbm','glm','nnet','svm'),
trControl = objControl,
metric ="ROC",verbose = FALSE)
model_list = caretList (as.factor(Popular) ~. ,data = TrainHeadline,  methodList = c('gbm','glm','nnet','svmRadialWeights'),
trControl = objControl,
metric ="ROC",verbose = FALSE)
library(randomForest)
HeadlineWordsRF = randomForest(as.factor(Popular)~., data = TrainHeadline, importance = TRUE)
PredRF = as.data.frame(predict(HeadlineWordsRF, newdata=TestHeadline, type = "prob"))
library(caret)
objControl = trainControl(method = 'cv',number = 20,classProbs= TRUE)
objControl = trainControl(method = 'cv',number = 10,classProbs= TRUE)
modelCasualglm = train(as.factor(Popular) ~. ,data = TrainHeadline,  method = "gbm",
trControl = objControl,
metric ="ROC",verbose = FALSE)
Predgbm = as.data.frame(predict(modelCasualglm, newdata=TestHeadline, type = "prob"))
HeadlineWordsLog = glm(as.factor(Popular)~., data = TrainHeadline, family= binomial)
PredLog = as.data.frame(predict(HeadlineWordsLog, newdata=TestHeadline, type = "response"))
library(e1071)
HeadlineSvm = svm(as.factor(Popular)~., data = TrainHeadline, probability = TRUE)
PredSvm = predict(HeadlineSvm, newdata=TestHeadline,probability = TRUE)
library(nnet)
Headlinennet = nnet(as.factor(Popular)~., data= TrainHeadline, size = 9)
Prednnet = predict (Headlinennet, newdata = TestHeadline, type = "raw")
PredTest = (2.5*PredLog+2.5*Predgbm$Yes +2*PredRF$Yes +1.5*attr(PredSvm, "probabilities")[,1] +1.5*Prednnet )/10
PredTest = (3*PredLog+2*Predgbm$Yes +1.5*PredRF$Yes +1.5*attr(PredSvm, "probabilities")[,1] +2*Prednnet )/10
MySubmissionCombined = data.frame(UniqueID = OriginalTest$UniqueID, Probability1 = PredTest)
colnames(MySubmissionCombined) = c("UniqueID","Probability1")
write.csv(MySubmissionCombined, "SubmissionHeadlinecombined.csv", row.names=FALSE)
plot(MySubmissionCombined$Probability1)
MySubmissionCombined = data.frame(UniqueID = OriginalTest$UniqueID, Probability1 = Prediction)
PredTest = (3*PredLog+2*Predgbm$Yes +1.5*PredRF$Yes +1.5*attr(PredSvm, "probabilities")[,1] +2*Prednnet )/10
MySubmissionCombined = data.frame(UniqueID = OriginalTest$UniqueID, Probability1 = PredTest)
colnames(MySubmissionCombined) = c("UniqueID","Probability1")
write.csv(MySubmissionCombined, "SubmissionHeadlinecombined.csv", row.names=FALSE)
plot(MySubmissionCombined$Probability1)
MySubmissionCombined = data.frame(UniqueID = OriginalTest$UniqueID, Probability1 = Prediction)
plot(MySubmissionCombined$Probability1)
set.seed(20)
spl = sample.split (TrainHeadline$Popular, SplitRatio = 0.7)
library(caTools)
spl = sample.split (TrainHeadline$Popular, SplitRatio = 0.7)
ensembleData = subset(EnsembleTrain, spl = TRUE)
blenderData = subset(EnsembleTrain, spl = FALSE)
testingData = TestHeadline
library(randomForest)
HeadlineWordsRF = randomForest(as.factor(Popular)~., data = ensembleData, importance = TRUE)
library(caTools)
set.seed(20)
spl = sample.split (TrainHeadline$Popular, SplitRatio = 0.5)
ensembleData = subset(EnsembleTrain, spl = TRUE)
blenderData = subset(EnsembleTrain, spl = FALSE)
testingData = TestHeadline
library(randomForest)
HeadlineWordsRF = randomForest(as.factor(Popular)~., data = ensembleData, importance = TRUE)
library(caret)
objControl = trainControl(method = 'cv',number = 10,classProbs= TRUE)
modelCasualglm = train(as.factor(Popular) ~. ,data = ensembleData,  method = "gbm",
trControl = objControl,
metric ="ROC",verbose = FALSE)
library(caTools)
set.seed(20)
spl = sample.split (TrainHeadline$Popular, SplitRatio = 0.5)
ensembleData = subset(EnsembleTrain$Popular, spl = TRUE)
spl = sample.split (TrainHeadline$Popular, SplitRatio = 0.5)
library(caTools)
set.seed(20)
spl = sample.split (TrainHeadline$Popular, SplitRatio = 0.5)
ensembleData = subset(TrainHeadline, spl = TRUE)
blenderData = subset(TrainHeadline, spl = FALSE)
ensembleData = subset(TrainHeadline, spl == TRUE)
blenderData = subset(TrainHeadline, spl = FALSE)
ensembleData = subset(TrainHeadline, spl == TRUE)
blenderData = subset(TrainHeadline, spl == FALSE)
testingData = TestHeadline
library(randomForest)
HeadlineWordsRF = randomForest(as.factor(Popular)~., data = ensembleData, importance = TRUE)
library(caret)
objControl = trainControl(method = 'cv',number = 10,classProbs= TRUE)
modelCasualglm = train(as.factor(Popular) ~. ,data = ensembleData,  method = "gbm",
trControl = objControl,
metric ="ROC",verbose = FALSE)
HeadlineWordsLog = glm(as.factor(Popular)~., data = ensembleData, family= binomial)
library(e1071)
HeadlineSvm = svm(as.factor(Popular)~., data = ensembleData, probability = TRUE)
library(nnet)
Headlinennet = nnet(as.factor(Popular)~., data= ensembleData, size = 9)
blenderData$PredRF = predict(HeadlineWordsRF, newdata=blenderData, type = "prob")[,2]
blenderData$Predgbm = predict(modelCasualglm, newdata=blenderData, type = "prob")[,2]
blenderData$PredLog = predict(HeadlineWordsLog, newdata=blenderData, type = "response")
blenderData$PredSvm = predict(HeadlineSvm, newdata=blenderData,probability = TRUE)
blenderData$Prednnet = predict (Headlinennet, newdata = blenderData, type = "raw")
testingData$PredRF = predict(HeadlineWordsRF, newdata=testingData, type = "prob")[,2]
testingData$Predgbm = predict(modelCasualglm, newdata=testingData, type = "prob")[,2]
testingData$PredLog = predict(HeadlineWordsLog, newdata=testingData, type = "response")
testingData$PredSvm = predict(HeadlineSvm, newdata=testingData,probability = TRUE)
testingData$Prednnet = predict (Headlinennet, newdata = testingData, type = "raw")
library(caret)
objControl = trainControl(method = 'cv',number = 10,classProbs= TRUE)
final_blender_model = train(as.factor(Popular) ~. ,data = blenderData,  method = "gbm",
trControl = objControl,
metric ="ROC",verbose = FALSE)
varImp (final_blender_model)
Prediction = predict(final_blender_model, newdata=testingData, type = "prob")[,2]
MySubmissionCombined = data.frame(UniqueID = OriginalTest$UniqueID, Probability1 = Prediction)
plot(MySubmissionCombined$Probability1)
summary(MySubmissionCombined$Probability1)
MySubmissionCombined = data.frame(UniqueID = OriginalTest$UniqueID, Probability1 = Prediction)
colnames(MySubmissionCombined) = c("UniqueID","Probability1")
write.csv(MySubmissionCombined, "SubmissionHeadlineTrueEnsemble.csv", row.names=FALSE)
objControl = trainControl(method = 'cv',number = 5,classProbs= TRUE)
final_blender_model = train(as.factor(Popular) ~. ,data = blenderData,  method = "gbm",
trControl = objControl,
metric ="ROC",verbose = FALSE)
varImp (final_blender_model)
objControl = trainControl(method = 'cv',number = 10,classProbs= TRUE)
final_blender_model = train(as.factor(Popular) ~. ,data = blenderData,  method = "gbm",
trControl = objControl,
metric ="ROC",verbose = FALSE)
Prediction = predict(final_blender_model, newdata=testingData, type = "prob")[,2]
MySubmissionCombined = data.frame(UniqueID = OriginalTest$UniqueID, Probability1 = Prediction)
plot(MySubmissionCombined$Probability1)
objControl = trainControl(method = 'cv',number = 10,classProbs= TRUE)
final_blender_model = train(as.factor(Popular) ~. ,data = blenderData,  method = "gbm",
trControl = objControl,
metric ="ROC",verbose = FALSE)
varImp (final_blender_model)
Prediction = predict(final_blender_model, newdata=testingData, type = "prob")[,2]
MySubmissionCombined = data.frame(UniqueID = OriginalTest$UniqueID, Probability1 = Prediction)
colnames(MySubmissionCombined) = c("UniqueID","Probability1")
write.csv(MySubmissionCombined, "SubmissionHeadlineTrueEnsemble.csv", row.names=FALSE)
library(caTools)
set.seed(20)
spl = sample.split (TrainHeadline$Popular, SplitRatio = 0.5)
ensembleData = subset(TrainHeadline, spl == TRUE)
blenderData = subset(TrainHeadline, spl == FALSE)
testingData = TestHeadline
library(caTools)
set.seed(20)
spl = sample.split (TrainHeadline$Popular, SplitRatio = 0.7)
ensembleData = subset(TrainHeadline, spl == TRUE)
blenderData = subset(TrainHeadline, spl == FALSE)
testingData = TestHeadline
library(randomForest)
HeadlineWordsRF = randomForest(as.factor(Popular)~., data = ensembleData, importance = TRUE)
library(caret)
objControl = trainControl(method = 'cv',number = 10,classProbs= TRUE)
modelCasualglm = train(as.factor(Popular) ~. ,data = ensembleData,  method = "gbm",
trControl = objControl,
metric ="ROC",verbose = FALSE)
warnings()
HeadlineWordsLog = glm(as.factor(Popular)~., data = ensembleData, family= binomial)
library(e1071)
HeadlineSvm = svm(as.factor(Popular)~., data = ensembleData, probability = TRUE)
library(nnet)
Headlinennet = nnet(as.factor(Popular)~., data= ensembleData, size = 9)
blenderData$PredRF = predict(HeadlineWordsRF, newdata=blenderData, type = "prob")[,2]
blenderData$Predgbm = predict(modelCasualglm, newdata=blenderData, type = "prob")[,2]
blenderData$PredLog = predict(HeadlineWordsLog, newdata=blenderData, type = "response")
blenderData$PredSvm = predict(HeadlineSvm, newdata=blenderData,probability = TRUE)
blenderData$Prednnet = predict (Headlinennet, newdata = blenderData, type = "raw")
testingData$PredRF = predict(HeadlineWordsRF, newdata=testingData, type = "prob")[,2]
testingData$Predgbm = predict(modelCasualglm, newdata=testingData, type = "prob")[,2]
testingData$PredLog = predict(HeadlineWordsLog, newdata=testingData, type = "response")
testingData$PredSvm = predict(HeadlineSvm, newdata=testingData,probability = TRUE)
testingData$Prednnet = predict (Headlinennet, newdata = testingData, type = "raw")
library(caret)
objControl = trainControl(method = 'cv',number = 5,classProbs= TRUE)
final_blender_model = train(as.factor(Popular) ~. ,data = blenderData,  method = "gbm",
trControl = objControl,
metric ="ROC",verbose = FALSE)
varImp (final_blender_model)
Prediction = predict(final_blender_model, newdata=testingData, type = "prob")[,2]
MySubmissionCombined = data.frame(UniqueID = OriginalTest$UniqueID, Probability1 = Prediction)
colnames(MySubmissionCombined) = c("UniqueID","Probability1")
write.csv(MySubmissionCombined, "SubmissionHeadlineTrueEnsemble.csv", row.names=FALSE)
library(caTools)
set.seed(20)
spl = sample.split (TrainHeadline$Popular, SplitRatio = 0.3)
ensembleData = subset(TrainHeadline, spl == TRUE)
blenderData = subset(TrainHeadline, spl == FALSE)
testingData = TestHeadline
library(randomForest)
HeadlineWordsRF = randomForest(as.factor(Popular)~., data = ensembleData, importance = TRUE)
library(randomForest)
HeadlineWordsRF = randomForest(as.factor(Popular)~., data = TrainHeadline, importance = TRUE)
PredRF = as.data.frame(predict(HeadlineWordsRF, newdata=TestHeadline, type = "prob"))
library(caret)
objControl = trainControl(method = 'cv',number = 7,classProbs= TRUE)
modelCasualglm = train(as.factor(Popular) ~. ,data = TrainHeadline,  method = "gbm",
trControl = objControl,
metric ="ROC",verbose = FALSE)
HeadlineWordsLog = glm(as.factor(Popular)~., data = TrainHeadline, family= binomial)
PredLog = as.data.frame(predict(HeadlineWordsLog, newdata=TestHeadline, type = "response"))
library(e1071)
HeadlineSvm = svm(as.factor(Popular)~., data = TrainHeadline, probability = TRUE)
PredSvm = predict(HeadlineSvm, newdata=TestHeadline,probability = TRUE)
library(nnet)
Headlinennet = nnet(as.factor(Popular)~., data= TrainHeadline, size = 9)
Prednnet = predict (Headlinennet, newdata = TestHeadline, type = "raw")
PredTest = (3*PredLog+2*Predgbm$Yes +1.5*PredRF$Yes +1.5*attr(PredSvm, "probabilities")[,1] +2*Prednnet )/10
MySubmissionCombined = data.frame(UniqueID = OriginalTest$UniqueID, Probability1 = PredTest)
colnames(MySubmissionCombined) = c("UniqueID","Probability1")
write.csv(MySubmissionCombined, "SubmissionHeadlinecombined.csv", row.names=FALSE)
PredTest = (2*PredLog+3*Predgbm$Yes +1.5*PredRF$Yes +1.5*attr(PredSvm, "probabilities")[,1] +2*Prednnet )/10
MySubmissionCombined = data.frame(UniqueID = OriginalTest$UniqueID, Probability1 = PredTest)
colnames(MySubmissionCombined) = c("UniqueID","Probability1")
write.csv(MySubmissionCombined, "SubmissionHeadlinecombined.csv", row.names=FALSE)
